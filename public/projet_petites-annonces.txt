A FAIRE:
ReCaptcha
Mail
DROPZONE


Début le 25/08/2020

Projet - petites annonces 		
		
		
 - Il doit permettre de :		
	-Poster une annonce	
	-Lister les annonces
	-Modifier une annonce
	-Supprimer une annonce
		
		
		
		
Cycle pour poster une annonce		
	Sur la page listant les annonces afficher un lien permettant de publier une annonce	
	Lorsque la personne arrive sur le formulaire permettant de poster une annonce elle devra saisir	
		. Adresse mail
		. Nom
		. Prénom
		. Téléphone
		. Catégorie de l'annonce : Immobilier, Auto-Moto, Emploi, Animaux, Services, Vacances, Affaires pro, Autres
		. Image de mise en avant de l'annonce (optionnel)
		. Texte de l'annonce
		. Captcha
__Lorsque la personne poste son annonce, elle reçois un mail dans lequel il y a un lien demandant de confimer la publication de l'annonce.
	__Dans ce même courriel, il doit y avoir un lien permettant de modifier l'annonce.
	__Une fois confirmé alors l'annonce est publié sur la page d'annonce et l'utilisateur reçoit un courriel lui permettant supprimer l'annonce. 	
	__Lorsque l'annonce est mise en ligne il ne doit plus être possible de la modifier avec le lien du premier courriel
		
Cycle pour lister les annonces		
	Au chargement de la page d'accueil on voit les dix premières annonces. Lorsque l'ascenseur est en bas de la liste, on affiche les dix annonces suivantes 	
	Pour les annonces n'ayant pas d'image afficher une image par défaut	
	Sous l'annonce on propose de télécharger l'annonce en PDF	
		
		
		
		
		
les plus : On ne réalise les plus que si vous avez le temps
	infinite scroll pour l'affichage des annonces
	faire un beau courriel avec la librairie MJML		
	Tâche cron qui supprime les annonces qui sont en attente de publication à n+2 jours de la date de création	
	Tâche cron qui supprime les annonces qui sont publiées à n+15 jours de la date de création. Envoyer un mail à la personne de la suppression de son annonce	
		
		
		
	Le formulaires seront validés par JS	
	Technos : Composer, PHP POO, TWIG pour le rendu frontend, SASS(optionnel), GIT, JS, HTML, CSS, librairie PHP pour les PDF, AltoRouteur pour le routeur
	Remarque :  On ne veut pas de pattern MVC, on reste en programmation objet POO simple
	Remarque : Pensez à crypter les accès de validation et modification	
		
		
		
		
   Equipes		
	Guillaume Perbet Back - Guillaume blondel Front	
	Alexandre Front - Jérémy Mathieu Back	
	Fouad Back - Adrien schmidt Front	
	Lisa Front - Sonia Back	
	Clovis Front - Vanessa Back	
	Léa Front, Stéphane Back	
	Adrien Paturot Back - Arnaud et Jessica Front	
		
	-Lead DEV	
		Guillaume perbet : Jessica, Vanessa, Lea, Guillaume Blondel
		Adrien Paturot : Sonia, Fouad, Adrien Schmidt, clovis
		Mathieu Jérémy : Lisa, Arnaud, Alexandre, Stéphane
		
	Support Photoshop, Illustrator : Lisa, Arnaud et Sonia	
		
	Si dans son équipe personne ne peut pas résoudre le soucis alors ont fait appel au lead Dev	
		
		
A rendre pour Date de début + 10 jours		



:::**/***En local */
/*Nom de la base de donnée*/
// define('DATABASE', 'annonces');
// /*Identifiant de la base de donnée*/ 
// define('USER', 'root');
// /*Mot de passe de la base de donnée*/ 
// define('PWD', '');
// /*Hôte de la base de donnée */
// define('HOST','localhost');


/*Connexion à la base de donnée*/
// try {
//     // En local
//     $dbh = new PDO('mysql:host='.HOST.';port=3308;dbname='.DATABASE, USER, PWD, array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8'));
//     // En prod
   
//     // $dbh = new PDO('mysql:host='.HOST.';dbname='.DATABASE, USER, PWD, array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8'));
//     } catch (PDOException $e) {
//     print "Erreur !: " . $e->getMessage() . "<br/>";
//     die();
// }


.htaccess
RewriteEngine on
RewriteCond %{REQUEST_URI} !^public
RewriteRule ^(.*)$ public/$1 [L]


pensez a définir un constante avec define qui permettra de redireger les requete avec les rtoues dans vos templates
le setbase path permettrons de définir les sous dossiers sur le serveur de l'acs qui est le serveur de production
define ( 'BASE_PATH', '/votre-nom/votre-dossier/')
$router->setBasePath('/votre-nom/votre-dossier/');

pour installer altorouter//
composer require altorouter/altorouter


pour le autoload
composer dump-autoload


Pour ajouter rapidement plusieurs itinéraires, vous pouvez utiliser la addRoutesméthode. Cette méthode accepte un tableau ou tout type de traversable.

$ router -> addRoutes ( array ( 
  array ( 'PATCH' , '/ users / [i: id]' ,  'users # update' ,  'update_user' ), 
  array ( 'DELETE' , '/ users / [i: id ] ' ,  ' users # delete ' ,  ' delete_user ' ) 
));


////sauvegarde

require_once dirname(dirname(dirname(__FILE__))).'/vendor/autoload.php';

// dirname — Renvoie le chemin du dossier parent
$loader = new \Twig\Loader\FilesystemLoader(dirname(dirname(__FILE__)).'/template');
$twig = new \Twig\Environment($loader, array(
    'cache' => dirname(dirname(__FILE__)).'/cache',
    'debug' => true,
));
$twig->addExtension(new \Twig\Extension\DebugExtension());


$db = new \App\Database();




$template = $twig->load('pages/lister.html.twig');

POO//
L’idée de la programmation orientée objet va donc être de grouper des parties de code qui servent à effectuer une tâche précise ensemble au sein d’objets afin d’obtenir une nouvelle organisation du code.

Les intérêts principaux de la programmation orientée objet vont être une structure générale du code plus claire, plus modulable et plus facile à maintenir et à déboguer.

Une classe est un ensemble cohérent de code qui contient généralement à la fois des variables et des fonctions et qui va nous servir de plan pour créer des objets. Le but d’une classe va donc être de créer des objets que nous allons ensuite pouvoir manipuler.
un nouvel utilisateur à chaque fois qu’un visiteur s’enregistre à partir des informations qu’il nous a fournies. Un utilisateur va être défini par des attributs comme son nom d’utilisateur ou son mot de passe. Ces attributs vont être des variables. Ensuite, un utilisateur va pouvoir réaliser certaines actions spécifiques comme se connecter, se déconnecter, modifier son profil, etc. Ces actions vont être des fonctions.

***Par convention, on placera généralement chaque nouvelle classe créée dans un fichier à part et on placera également tous nos fichiers de classe dans un dossier qu’on pourra appeler classes par exemple pour plus de simplicité.


***l’un des grands avantages de la POO se situe dans la clarté du code produit et cette clarté est notamment le résultat d’une bonne séparation du code.


Profitez-en pour noter que les méthodes qui servent à définir / modifier / mettre à jour une valeur sont appelées des setters. Généralement, on fera commencer leur nom par set afin de bien les identifier comme on l’a fait pour nos méthodes setNom() et setPass().
///
De même, les méthodes qui servent à récupérer des valeurs sont appelées des getters et on fera commencer leur nom par get. Ces notations sont des conventions qui ont pour but de clarifier les scripts et de simplifier la vie des développeurs.

 le mot clef private à la place de public qui signifie que nos propriétés ne sont désormais plus accessibles que depuis l’intérieur de la classe.

  le mot clef $this. Ce mot clef est appelé pseudo-variable et sert à faire référence à l’objet couramment utilisé.


  ////     $loader = new \Twig\Loader\FilesystemLoader(dirname(dirname(__FILE__)).'/template');

//     $twig = new \Twig\Environment($loader, array(
//     'cache' => (dirname(dirname(__FILE__))).'/cache',
//     'debug' => true,
// ));
// $twig->addExtension(new \Twig\Extension\DebugExtension());

// $template = $twig->load('pages/lister.html.twig');
//    echo $template->render([]);




//  foreach($db->query('SELECT * FROM annonce') as $post){

//      echo "$post->utilisateur_id";
//       echo "$post->ann_description";
//  }
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule .* - [L]
RewriteRule . index.php [L]



Pour lancer sass 
npm run sass



'description'=>$ann_description, 'titre'=>$ann_titre, 'nom_image'=>$ann_image_nom, 'date_ecriture'=>$ann_date_ecriture, 'categorie'=>$categorie_id, 'nom'=>$usr_nom, 'prenom'=>$usr_prenom, 'telephone'=>$usr_telephone, 'email'=>$usr_email


$ann_prix = isset($_POST['prix']) ? $_POST['prix'] : NULL;
$ann_description= isset($_POST['description']) ? $_POST['prix']: NULL;
$ann_titre = isset($_POST['titre']) ? $_POST['titre'] : NULL;
$ann_image_nom = isset($_POST['nom-image']) ? $_POST['nom-image'] : NULL;
$ann_date_ecriture = isset($_POST['date-ecriture']) ? $_POST['date-ecriture'] : NULL;
$usr_prenom = isset($_POST['prenom']) ? $_POST['prenom'] : NULL;
$usr_nom = isset($_POST['nom']) ? $_POST['nom'] : NULL;
$usr_telephone = isset($_POST['telephone']) ? $_POST['telephone'] : NULL;
$usr_email = isset($_POST['email']) ? $_POST['email'] : NULL;
$categorie_id = isset($_POST['categorie']) ? $_POST['categorie'] : NULL;
